parameters:
- name: name
- name: displayName
- name: osName
- name: vmImage
- name: testType
- name: timeoutInMinutes
  type: number
  default: 60

jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  variables:
    - name: TestType
      value: ${{ parameters.testType }}
    - name: TestResultsDirectory
      ${{ if eq(parameters.osName, 'Windows') }}:
        value: $(Agent.TempDirectory)\TestResults\${{ parameters.TestType }}\
      ${{ else }}:
        value: $(Agent.TempDirectory)/TestResults/${{ parameters.TestType }}/
    - name: BinlogDirectory
      ${{ if eq(parameters.osName, 'Windows') }}:
        value: $(Agent.TempDirectory)\binlogs\${{ parameters.TestType }}\
      ${{ else }}:
        value: $(Agent.TempDirectory)/binlogs/${{ parameters.TestType }}/
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - ${{ if eq(parameters.osName, 'Windows') }}:
    - task: PowerShell@2
      displayName: Run configure.ps1
      inputs:
        filePath: configure.ps1
  - ${{ else }}:
    - task: Bash@3
      displayName: Run configure.sh
      env:
        RESTORE_NUGET_PACKAGES: false
      inputs:
        filePath: configure.sh

  - ${{ if eq(parameters.osName, 'Windows') }}:
    - script: SET | SORT
      displayName: Log Environment Variables
  - ${{ else }}:
    - script: env | sort -f
      displayName: Log Environment Variables

  - ${{ if eq(parameters.osName, 'Windows') }}:
    - task: MSBuild@1
      displayName: Restore and Build $(TestType) Test Projects
      inputs:
        solution: NuGet.sln
        msbuildArguments: --binarylogger:"$(BinlogDirectory)01.RestoreAndBuild.binlog"
  - ${{ else }}:
    - task: DotNetCoreCLI@2
      displayName: Restore and Build $(TestType) Test Projects
      inputs:
        command: build
        arguments: --binarylogger:"$(BinlogDirectory)01.RestoreAndBuild.binlog"

  - ${{ if eq(parameters.osName, 'Windows') }}:
    - task: DotNetCoreCLI@2
      displayName: Run .NET Framework $(TestType) Tests 
      condition: succeededOrFailed()
      inputs:
        command: test
        arguments: --no-restore --restore:false --no-build --framework net472 --logger trx --results-directory "$(TestResultsDirectory)net472" --binarylogger:"$(BinlogDirectory)02.$(TestType).net472.binlog"
        publishTestResults: false

  - ${{ if eq(parameters.osName, 'Windows') }}:
    - task: PublishTestResults@2
      displayName: Publish .NET Framework $(TestType) Tests Results 
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '**/*.trx'
        searchFolder: $(TestResultsDirectory)net472
        mergeTestResults: true
        failTaskOnMissingResultsFile: true
        testRunTitle: ${{ parameters.osName }} $(TestType) Tests (.NET Framework)

  - task: DotNetCoreCLI@2
    displayName: Run .NET 8.0 $(TestType) Tests 
    condition: succeededOrFailed()
    inputs:
      command: test
      arguments: --no-restore --restore:false --no-build --framework net8.0 --logger trx --results-directory "$(TestResultsDirectory)net8.0" --binarylogger:"$(BinlogDirectory)02.$(TestType).net8.0.binlog"
      publishTestResults: false

  - task: PublishTestResults@2
    displayName: Publish .NET 8.0 $(TestType) Tests Results 
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx'
      searchFolder: $(TestResultsDirectory)net8.0
      mergeTestResults: true
      failTaskOnMissingResultsFile: true
      testRunTitle: ${{ parameters.osName }} $(TestType) Tests (.NET 8.0)

  - task: DotNetCoreCLI@2
    displayName: Run .NET Core 3.1 $(TestType) Tests 
    condition: succeededOrFailed()
    inputs:
      command: test
      arguments: --no-restore --restore:false --no-build --framework netcoreapp3.1 --logger trx --results-directory "$(TestResultsDirectory)netcoreapp3.1" --binarylogger:"$(BinlogDirectory)02.$(TestType).netcoreapp3.1.binlog"
      publishTestResults: false

  - task: PublishTestResults@2
    displayName: Publish .NET Core 3.1 $(TestType) Tests Results 
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx'
      searchFolder: $(TestResultsDirectory)netcoreapp3.1
      mergeTestResults: true
      failTaskOnMissingResultsFile: true
      testRunTitle: ${{ parameters.osName }} $(TestType) Tests (.NET Core 3.1)

  - task: PublishPipelineArtifact@1
    displayName: Publish MSBuild Binary Logs
    condition: or(failed(), eq(variables['System.Debug'], 'true'))
    inputs:
      targetPath: $(BinlogDirectory)
      artifact: binlog - $(System.JobDisplayName) - Attempt $(System.JobAttempt)
